{"version":3,"sources":["newTry/NewUploadFileComponent.js","newTry/NewFileUploadContainer.js","newTry/ListForDocumentsComponent.js","newTry/ListForDocumentContainer.js","App.js","serviceWorker.js","index.js"],"names":["NewUploadFileComponent","props","className","onSubmit","onFormSubmit","type","onChange","NewUploadFileContainer","e","setState","file","target","files","preventDefault","data","FormData","append","state","console","log","axios","post","then","response","catch","error","this","Component","ListForDocumentComponent","results","ListForDocumentContainer","getDocumentList","get","alert","result","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAoBeA,EAlBgB,SAAAC,GAC3B,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,0BAAMC,SAAUF,EAAMG,cAClB,2CACA,2BAAOC,KAAK,OAAOC,SAAUL,EAAMK,WACnC,4BAAQD,KAAK,UAAb,eCqCTE,E,YA1CX,aAAe,IAAD,8BACV,+CAOJD,SAAW,SAACE,GACR,EAAKC,SAAS,CAAEC,KAAMF,EAAEG,OAAOC,MAAM,MAT3B,EAYdR,aAAe,SAACI,GACZA,EAAEK,iBACF,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQ,EAAKC,MAAMP,MAC/BQ,QAAQC,IAAI,OAAQL,GACpBM,IACKC,KAAK,wCAAyCP,GAC9CQ,MAAK,SAACC,GACHL,QAAQC,IAAI,cAEfK,OAAM,SAACC,GACJP,QAAQC,IAAI,iBArBpB,EAAKF,MAAQ,CACTP,KAAM,MAEVQ,QAAQC,IAAI,EAAKF,MAAMP,MALb,E,sEA6BV,OACI,6BACI,kBAAC,EAAD,CACIA,KAAMgB,KAAKT,MAAMP,KACjBJ,SAAUoB,KAAKpB,SACfF,aAAcsB,KAAKtB,oB,GAnCFuB,aCQtBC,EAVkB,SAAA3B,GAC7B,OACI,6BACI,wBAAIC,UAAU,+BACV,wBAAIA,UAAU,mBAAmBD,EAAM4B,YCgCxCC,E,YAjCX,aAAe,IAAD,8BACV,+CAUJC,gBAAkB,WACdX,IAAMY,IAAI,uCACLV,MAAK,SAAAC,GACF,EAAKd,SAAS,CAAEoB,QAASN,EAAST,UAErCU,OAAM,SAAAC,GACHQ,MAAM,uEAfd,EAAKhB,MAAQ,CACTY,QAAS,IAHH,E,iFAQVH,KAAKK,oB,+BAcL,IAAIG,EAASR,KAAKT,MAAMY,QAAQM,KAAI,SAACD,EAAQE,GACzC,OAAO,kBAAC,EAAD,CAA0BC,IAAKD,EAAOF,OAAQA,OAEzD,OACI,6BACKA,O,GA5BsBP,aCcxBW,MAXf,WACE,OACE,yBAAKpC,UAAU,2BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.b98ce5f5.chunk.js","sourcesContent":["import React from 'react';\n\nconst NewUploadFileComponent = props => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <form onSubmit={props.onFormSubmit}>\n                        <h1>File Upload</h1>\n                        <input type=\"file\" onChange={props.onChange} />\n                        <button type=\"submit\">Upload</button>\n                    </form>\n                </div>\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default NewUploadFileComponent;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport NewUploadFileComponent from \"./NewUploadFileComponent\";\n\nclass NewUploadFileContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            file: null\n        };\n        console.log(this.state.file)\n    }\n\n    onChange = (e) => {\n        this.setState({ file: e.target.files[0] })\n    }\n\n    onFormSubmit = (e) => {\n        e.preventDefault();\n        const data = new FormData()\n        data.append(\"file\", this.state.file)\n        console.log(\"Info\", data)\n        axios\n            .post(\"http://localhost:8080/file/uploadFile\", data)\n            .then((response) => {\n                console.log(\"Pavyko.\")\n            })\n            .catch((error) => {\n                console.log(\"nepavyko.\")\n            })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <NewUploadFileComponent\n                    file={this.state.file}\n                    onChange={this.onChange}\n                    onFormSubmit={this.onFormSubmit}\n                />\n            </div>\n        );\n    }\n\n}\n\nexport default NewUploadFileContainer;\n","import React from 'react';\n\nconst ListForDocumentComponent = props => {\n    return (\n        <div>\n            <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item\">{props.results}</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default ListForDocumentComponent;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ListForDocumentComponent from './ListForDocumentsComponent';\n\nclass ListForDocumentContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            results: []\n        }\n    }\n\n    componentDidMount() {\n        this.getDocumentList();\n    }\n\n    getDocumentList = () => {\n        axios.get(\"http://localhost:8080/file/allFiles\")\n            .then(response => {\n                this.setState({ results: response.data });\n            })\n            .catch(error => {\n                alert(\"Nėra galimybės pateikti duomenų apie dokumentus.\");\n            });\n    };\n\n    render() {\n        let result = this.state.results.map((result, index) => {\n            return <ListForDocumentComponent key={index} result={result} />;\n        });\n        return (\n            <div>\n                {result}\n            </div>\n        )\n    };\n}\n\nexport default ListForDocumentContainer;\n","import React from 'react';\nimport './App.css';\nimport NewUploadFileContainer from './newTry/NewFileUploadContainer';\nimport ListForDocumentContainer from './newTry/ListForDocumentContainer';\nimport ListForDocumentComponent from './newTry/ListForDocumentsComponent';\n\n\nfunction App() {\n  return (\n    <div className=\"container-fluid mx-auto\">\n      <NewUploadFileContainer />\n      <ListForDocumentComponent />\n      <ListForDocumentContainer />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}