{"version":3,"sources":["newTry/NewUploadFileComponent.js","newTry/ListForDocumentsComponent.js","newTry/NewFileUploadContainer.js","newTry/Header.js","App.js","serviceWorker.js","index.js"],"names":["NewUploadFileComponent","props","className","onSubmit","onFormSubmit","type","onChange","id","ListForDocumentComponent","result","NewUploadFileContainer","show","e","showResults","setState","file","target","files","preventDefault","data","FormData","append","state","axios","post","then","response","get","results","catch","error","alert","onClick","handleClick","delete","downloadFiles","fetch","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","this","map","index","key","Component","Header","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b65fd1e2.chunk.js","sourcesContent":["import React from 'react';\n\nconst NewUploadFileComponent = props => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <form onSubmit={props.onFormSubmit}>\n                        <h1>File Upload</h1>\n                        <input type=\"file\" onChange={props.onChange} />\n                        <div>\n                            <button id=\"uploadButton\" type=\"submit\">Upload</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default NewUploadFileComponent;","import React from 'react';\n\nconst ListForDocumentComponent = props => {\n    return (\n        <div className=\"col-md-6\">\n            <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item\">{props.result}</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default ListForDocumentComponent;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport NewUploadFileComponent from \"./NewUploadFileComponent\";\nimport ListForDocumentComponent from \"./ListForDocumentsComponent\";\n\nclass NewUploadFileContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            file: null,\n            results: [],\n        };\n    }\n\n    show = (e) => {\n        return { showResults: false };\n    }\n\n    onChange = (e) => {\n        this.setState({ file: e.target.files[0] })\n    }\n\n    onFormSubmit = (e) => {\n        e.preventDefault();\n        const data = new FormData()\n        data.append(\"file\", this.state.file)\n        axios\n            .post(\"http://localhost:8080/file/uploadFile\", data)\n            .then((response) => {\n                axios.get(\"http://localhost:8080/file/allFilesNames\")\n                    .then(response => {\n                        this.setState({ results: response.data });\n                    })\n                    .catch(error => {\n                    });\n            })\n            .catch((error) => {\n                alert(\"You haven't uploaded any files, please try again.\")\n            })\n    }\n\n    onClick = (e) => {\n        e.preventDefault();\n        axios.post(\"http://localhost:8080/file/writeToFile\")\n            .then(response => {\n                this.setState({ showResults: true });\n                alert(\"Words in your files were counted successfully. If you'd like to get your results, please press Download button.\")\n            })\n            .catch(error => {\n                alert(\"Program was not able to count words. Please check if you uploaded any files.\")\n            })\n    };\n\n    handleClick = (e) => {\n        e.preventDefault();\n        axios.delete(\"http://localhost:8080/file/delete\")\n            .then(response => {\n                axios.get(\"http://localhost:8080/file/allFilesNames\")\n                    .then(response => {\n                        this.setState({ results: response.data });\n                        alert(\"You have deleted all files successfully. \\nYou can upload new files.\")\n                    })\n                    .catch(error => {\n                    });\n            })\n            .catch(error => { });\n\n    }\n\n    downloadFiles = () => {\n        fetch('http://localhost:8080/downloadZip')\n            .then(response => {\n                response.blob().then(blob => {\n                    let url = window.URL.createObjectURL(blob);\n                    let a = document.createElement('a');\n                    a.href = url;\n                    a.download = 'Results.zip';\n                    a.click();\n                });\n            });\n    }\n\n    render() {\n        let result = this.state.results.map((result, index) => {\n            return <ListForDocumentComponent key={index} result={result} />;\n        });\n        return (\n            <div className=\"container\" >\n                <NewUploadFileComponent\n                    file={this.state.file}\n                    onChange={this.onChange}\n                    onFormSubmit={this.onFormSubmit}\n                />\n\n                <hr></hr>\n\n                <h3 id=\"upload\">You have uploaded these files: </h3>\n                {result}\n\n                <hr id=\"hr\"></hr>\n\n                <div className=\"row\" id=\"newRow\">\n                    <h3 id=\"canDo\">You can:</h3>\n                    <div className=\"col-2\" id=\"countWords\">\n                        <button id=\"btn\" onClick={this.onClick} > Count words</button>\n                    </div>\n                    <div className=\"col-1\">\n                        <h3>or</h3>\n                    </div>\n                    <div className=\"col-3\" id=\"countWords\">\n                        <button onClick={this.handleClick}>Delete present files</button>\n                    </div>\n                </div>\n\n                <hr id=\"hr\"></hr>\n                <div>\n                    {this.state.showResults ?\n                        <div>\n                            <h4 className=\"download\">If you'd like to download files with the results, please press the download button below:</h4>\n                            <button className=\"download\" onClick={this.downloadFiles}>Download</button>\n                        </div>\n                        : null}\n                </div>\n            </div >\n        );\n    }\n\n}\n\nexport default NewUploadFileContainer;\n","import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Word counting APP</h1>\n            </div>\n        </div>\n    )\n};\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport NewUploadFileContainer from './newTry/NewFileUploadContainer';\nimport Header from './newTry/Header';\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <NewUploadFileContainer />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}