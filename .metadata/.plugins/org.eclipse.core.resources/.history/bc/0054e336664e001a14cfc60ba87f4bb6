package project.metasite.newWay;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

@Service
public class FileService {

	private Path fileStorageLocation;

	FileStorageProperties fileStorageProperties;

	@Autowired
	FileRepository fileRepo;

	@Autowired
	public FileService(FileStorageProperties fileStorageProperties) {
		this.fileStorageLocation = Paths.get(fileStorageProperties.getUploadDir()).toAbsolutePath().normalize();
	}

	@Transactional
	public List<String> getAllFilesNames() {
		List<String> results = new ArrayList<String>();
		File[] files = new File("/home/asta/Desktop/Project For Matesite/Uploads/").listFiles();

		for (File file : files) {
			if (file.isFile()) {
				results.add(file.getName());
			}
		}
		return results;
	}

	@Transactional
	public String storeFile(MultipartFile file) throws IOException {
		// Normalize file name
		String fileName = StringUtils.cleanPath(file.getOriginalFilename());

		try {
			// Check if the file's name contains invalid characters
//			if (fileName.contains("..")) {
//				throw new FileStorageException("Sorry! Filename contains invalid path sequence " + fileName);
//			}

			// Copy file to the target location (Replacing existing file with the same name)
			Path targetLocation = this.fileStorageLocation.resolve(fileName);
			Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);

			return fileName;
		} catch (IOException ex) {
			throw ex;
//			throw new FileStorageException("Could not store file " + fileName + ". Please try again!", ex);
		}
	}

	@Transactional
	public String readLineByLine() {
		String filePath = "/home/asta/Desktop/Project For Matesite/Uploads/MyFile.txt";

		StringBuilder contentBuilder = new StringBuilder();
		try (Stream<String> stream = Files.lines(Paths.get(filePath), StandardCharsets.UTF_8)) {
			stream.forEach(s -> contentBuilder.append(s));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return contentBuilder.toString();
	}

	@Transactional
	public List<String> countRepeatedWords() {
		String result = null;
		List<String> finalResult = new ArrayList<String>();
		String text = readLineByLine();
		List<String> list = Arrays.asList(text.split(" "));
		Set<String> uniqueWords = new HashSet<String>(list);
		for (String word : uniqueWords) {
			result = word + ": " + Collections.frequency(list, word);
			finalResult.add(result);
		}
		Collections.sort(finalResult);
		return finalResult;
	}

	@Transactional
	public void writeToFile() throws IOException {
		List<String> list = countRepeatedWords();
		FileWriter writer = new FileWriter("A to G.txt");
		FileWriter writerTwo = new FileWriter("H to N.txt");
		FileWriter writerThree = new FileWriter("O to U.txt");
//		FileWriter writerFour = new FileWriter("V to Z.txt");
		for (String str : list) {
			if (str.startsWith("n")) {
				writer.write(str + System.lineSeparator());
			} else if (str.startsWith("m")) {
				writerTwo.write(str + System.lineSeparator());
			} else if (str.startsWith("t")) {
				writerThree.write(str + System.lineSeparator());
			}
				
		}
	}
}
